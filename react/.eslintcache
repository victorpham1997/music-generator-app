[{"/home/victorpham1997/Workplace/SUTD/50038_computational_data_science/project/music-generator-app/react/src/index.js":"1","/home/victorpham1997/Workplace/SUTD/50038_computational_data_science/project/music-generator-app/react/src/reportWebVitals.js":"2","/home/victorpham1997/Workplace/SUTD/50038_computational_data_science/project/music-generator-app/react/src/App.js":"3","/home/victorpham1997/Workplace/SUTD/50038_computational_data_science/project/music-generator-app/react/src/Player.js":"4","/home/victorpham1997/Workplace/SUTD/50038_computational_data_science/project/music-generator-app/react/src/Recorder.js":"5","/home/victorpham1997/Workplace/SUTD/50038_computational_data_science/project/music-generator-app/react/src/Model.js":"6","/home/victorpham1997/Workplace/SUTD/50038_computational_data_science/project/music-generator-app/react/src/components/Instructions.js":"7","/home/victorpham1997/Workplace/SUTD/50038_computational_data_science/project/music-generator-app/react/src/components/Playbar.js":"8","/home/victorpham1997/Workplace/SUTD/50038_computational_data_science/project/music-generator-app/react/src/public/data.js":"9"},{"size":769,"mtime":1609503875415,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1609503875415,"results":"12","hashOfConfig":"11"},{"size":10763,"mtime":1609610392377,"results":"13","hashOfConfig":"11"},{"size":3047,"mtime":1609503875415,"results":"14","hashOfConfig":"11"},{"size":3241,"mtime":1609586081906,"results":"15","hashOfConfig":"11"},{"size":3862,"mtime":1609503875415,"results":"16","hashOfConfig":"11"},{"size":4398,"mtime":1609513577495,"results":"17","hashOfConfig":"11"},{"size":3018,"mtime":1609585870929,"results":"18","hashOfConfig":"11"},{"size":1585,"mtime":1609600062081,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1sbvkdl",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"22"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/home/victorpham1997/Workplace/SUTD/50038_computational_data_science/project/music-generator-app/react/src/index.js",[],["45","46"],"/home/victorpham1997/Workplace/SUTD/50038_computational_data_science/project/music-generator-app/react/src/reportWebVitals.js",[],"/home/victorpham1997/Workplace/SUTD/50038_computational_data_science/project/music-generator-app/react/src/App.js",["47","48","49","50","51","52","53","54","55","56","57"],"import './App.css';\nimport { useEffect, useState } from 'react'\nimport Player from './Player';\nimport * as Tone from 'tone'\nimport PlayBar from './components/Playbar'\nimport Insturction from './components/Instructions'\nimport data from './public/data'\nimport Recorder from './Recorder';\nimport Mousetrap from 'mousetrap'\nimport Model from './Model';\nimport { CircularProgress, Button, withTheme }  from '@material-ui/core'\n\n\nlet interval;\nfunction App() {\n\tlet SampleChords = data.sampleChords\n\tconst [recording, setRecording] = useState(false);\n\tconst [playing, setPlaying] = useState(false);\n\tconst [initializingGeneration, setInitializingGeneration] = useState(false);\n\tconst [isGenerating, setIsGenerating] = useState(false);\n\tconst [loadingText, setLoadingText] = useState('WAKING A.I. UP...\\n');\n\tconst [player, setPlayer] = useState(new Player());\n\tconst [playerTwo, setPlayerTwo] = useState(new Player());\n\tconst [recorder, setRecorder] = useState(new Recorder());\n\tconst [model, setModel] = useState(new Model());\n\tconst [notes, setNotes] = useState([]);\n\tconst [playheadTime, setPlayheadTime] = useState(0);\n\tconst [presentChords, setPresetChords] = useState([]);\n\n\tconst [currentChord, setCurrentChord] = useState(null);\n\n\tuseEffect(() => {\n\t\t(async () => {\n\t\t\tawait player.setup();\n\t\t\tplayer.sync();\n\t\t\tsetPlayer(player);\n\t\t\tawait playerTwo.setup();\n\t\t\tsetPlayerTwo(playerTwo);\n\n\t\t\tsetPresetChords(SampleChords)\n\t\t\t\n\t\t\tif (!interval) {\n\t\t\t\tinterval = setInterval(() => {\n\t\t\t\t\tsetPlayheadTime(Tone.Transport.seconds * DURATION_FACTOR)\n\t\t\t\t\t\n\t\t\t\t\t//retrieve recording state\n\t\t\t\t\tsetRecording(recording=>{\n\t\t\t\t\t\tif(recording) {\n\t\t\t\t\t\t\tlet notes = recorder.getVisualNotes();\t\t\t\t\t\t\n\t\t\t\t\t\t\tsetNotes(notes);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn recording;\n\t\t\t\t\t})\n\t\t\t\t\t//retrieve playing state\n\t\t\t\t\tsetPlaying(playing=>{\n\t\t\t\t\t\treturn playing;\n\t\t\t\t\t})\n\t\t\t\t}, 50);\n\t\t\t}\n\n\n\t\t\trecorder.onFinishRecording = async (result)=>{\n\t\t\t\tconst time_interval = 1250\n\t\t\t\tlet timeout = sleep(() => {\n\t\t\t\t\tsetLoadingText(text => text+'BRUSHING TEETH...\\n')\n\t\t\t\t\ttimeout = sleep(() => {\n\t\t\t\t\t\tsetLoadingText(text=> text+'ALMOST READY...\\n')\t\t\t\t\t\t\n\t\t\t\t\t\ttimeout = sleep(() => {\n\t\t\t\t\t\t\tsetLoadingText(text=> text+'DESTROYING GPUs...\\n')\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttimeout = sleep(() => {\n\t\t\t\t\t\t\t\tsetLoadingText(text=> text+'MAKING MUSIC...\\n')\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}, time_interval);\n\t\t\t\t\t\t}, time_interval);\n\t\t\t\t\t}, time_interval);\n\t\t\t\t}, time_interval);\n\n\t\t\t\tsetRecording(false);\n\t\t\t\tTone.Transport.stop()\n\t\t\t\tsetIsGenerating(true)\n\t\t\t\tsetInitializingGeneration(true);\n\t\t\t\tlet midiFile = await model.userInputToMidi(result);\n\t\t\t\tlet playbackNotes = player.notesFromMidiFile(midiFile);\n\t\t\t\tfor(let note of playbackNotes) {\n\t\t\t\t\tnote.user = true\n\t\t\t\t}\n\t\t\t\tplayer.addNotes(playbackNotes);\n\t\t\t\t\n\t\t\t\tlet {midi: generatedMidiFile, slicesBeforeGenerated } = await model.generateNext();\n\t\t\t\tlet timeOffset = slicesBeforeGenerated * recorder.timeSlice;\n\t\t\t\tlet generatedNotes = player.notesFromMidiFile(generatedMidiFile, timeOffset);\t\t\t\t\t\n\t\t\t\tplayer.addNotes(generatedNotes);\t\t\t\t\t\n\t\t\t\tsetNotes(notes=>[...notes, ...playbackNotes, ...generatedNotes]);\t\t\t\n\t\t\t\tsetInitializingGeneration(false);\n\n\t\t\t\tclearTimeout(timeout)\n\t\t\t\tsetLoadingText('WAKING A.I. UP...\\n')\n\n\t\t\t\tfor(let i=0; i<999; i++) {\n\t\t\t\t\tlet {midi: generatedMidiFile, slicesBeforeGenerated } = await model.generateNext();\n\t\t\t\t\tlet timeOffset = slicesBeforeGenerated * recorder.timeSlice;\n\t\t\t\t\tlet generatedNotes = player.notesFromMidiFile(generatedMidiFile, timeOffset);\t\t\t\t\t\n\t\t\t\t\tplayer.addNotes(generatedNotes);\n\t\t\t\t\tsetNotes(notes=>[...notes, ...generatedNotes]);\t\t\t\t\t\t\t\t\t\n\t\t\t\t\tlet shouldStop = false;\n\t\t\t\t\tsetIsGenerating(isGenerating => {\n\t\t\t\t\t\tshouldStop = !isGenerating;\n\t\t\t\t\t\treturn isGenerating;\n\t\t\t\t\t})\n\n\t\t\t\t\tif(shouldStop) {\n\t\t\t\t\t\tconsole.log(\"Stopped Generating!\")\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t};\n\t\t})()\n\t}, []); //on component mount\n\n\tconst MAX_MIDI = 88\n\tconst NOTE_HEIGHT = 5\n\tconst DURATION_FACTOR = 100\n\tasync function onChordDown(chord) {\n\t\tif (chord != currentChord) {\n\t\t\tawait playerTwo.triggerChordAttack(chord.array);\n\t\t\tsetCurrentChord(chord);\n\t\t}\n\t\trecorder.onChordPressed(chord);\n\t}\n\t\n\tasync function onChordUp(chord) {\n\t\t// console.log(chord)\n\t\tif (chord == currentChord) {\n\t\t\tsetCurrentChord(null)\n\t\t}\n\t\tawait playerTwo.triggerChordRelease(chord.array);\n\t\t\n\t\trecorder.onChordReleased(chord);\n\t}\n\n\tfor (let chord of data.sampleChords) {\n\t\tMousetrap.bind(chord.key, () => onChordDown(chord), 'keypress');\n\t\tMousetrap.bind(chord.key, () => onChordUp(chord), 'keyup');\n\n\t}\n\tfunction sleep(ms) {\n\t  return new Promise(resolve => setTimeout(resolve, ms));\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div style={{position: 'absolute', top: 10, right: 20, zIndex:'1', color: 'tomato'}}>{recorder.windowLength - recorder.slices.length}</div>\n\t\t\t<div class = \"overlay\" id=\"count3\" style={{visibility:'hidden'}}>3</div>\n\t\t\t<div class = \"overlay\" id=\"count2\" style={{visibility:'hidden'}}>2</div>\n\t\t\t<div class = \"overlay\" id=\"count1\" style={{visibility:'hidden'}}>1</div>\n\t\t\t<div className=\"App-header\">\n\t\t\t\t<div style={{ width: \"20%\", textTransform: \"uppercase\", fontSize: \"2vw\"}}>jazz generation project </div>\n\t\t\t\t<PlayBar\n\t\t\t\t\tonClickPlayPause={async() =>{\n\t\t\t\t\t\tif(playing==false){\n\t\t\t\t\t\t\tif(notes.length == 0) {\n\t\t\t\t\t\t\t\tlet midiFile = await player.midiFileFromUrl('/ABeautifulFriendship.mid');\n\t\t\t\t\t\t\t\tlet notes = player.notesFromMidiFile(midiFile);\n\t\t\t\t\t\t\t\tplayer.addNotes(notes);\n\t\t\t\t\t\t\t\tsetNotes(notes);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif(Tone.context.state == 'suspended') {\n\t\t\t\t\t\t\t\tTone.start()\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tTone.Transport.start()\n\t\t\t\t\t\t\tsetPlaying(true)\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tplayer.pausePlayback()\n\t\t\t\t\t\t\tsetPlaying(false)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}}\n\n\t\t\t\t\tonClickStop={async () => {\n\t\t\t\t\t\tawait player.stopMidiFile();\t\t\t\t\t\t\n\t\t\t\t\t\tsetIsGenerating(false);\n\t\t\t\t\t\tsetNotes([]);\n\t\t\t\t\t\tsetPlaying(false);\n\t\t\t\t\t}}\n\t\t\t\t\tonClickRecord={async () => {\n\t\t\t\t\t\t//reset\n\t\t\t\t\t\trecorder.reset();\n\t\t\t\t\t\tmodel.reset();\n\t\t\t\t\t\tawait player.stopMidiFile();\t\t\t\t\t\t\n\t\t\t\t\t\tsetIsGenerating(false);\n\t\t\t\t\t\tsetNotes([]);\n\n\t\t\t\t\t\tvar duration = parseInt(document.getElementById(\"recordDuration\").value);\n\n\t\t\t\t\t\tdocument.getElementById(\"count3\").style.visibility = 'visible';\n\t\t\t\t\t\tawait sleep(1000);\n\t\t\t\t\t\tdocument.getElementById(\"count3\").style.visibility = 'hidden';\n\t\t\t\t\t\tdocument.getElementById(\"count2\").style.visibility = 'visible';\n\t\t\t\t\t\tawait sleep(1000);\n\t\t\t\t\t\tdocument.getElementById(\"count2\").style.visibility = 'hidden';\n\t\t\t\t\t\tdocument.getElementById(\"count1\").style.visibility = 'visible';\n\t\t\t\t\t\tawait sleep(1000);\n\t\t\t\t\t\tdocument.getElementById(\"count1\").style.visibility = 'hidden';\n\n\t\t\t\t\t\tTone.Transport.start() //to start time\n\t\t\t\t\t\trecorder.startRecording(duration);\n\t\t\t\t\t\tsetRecording(true);\n\t\t\t\t\t\n\t\t\t\t\t}}\n\t\t\t\t\tonClickRecordStop={() => {\n\t\t\t\t\t\trecorder.finishRecording();\t\t\t\t\t\t\n\t\t\t\t\t}}\n\t\t\t\t\tonClickRewind={() => {\n\t\t\t\t\t\tTone.Transport.pause()\n\t\t\t\t\t\tTone.Transport.seconds = 0\n\t\t\t\t\t\tsetPlaying(false);\n\t\t\t\t\t}}\n\t\t\t\t\trecordingState = {recording}\n\t\t\t\t\tplayingState = {playing}\n\t\t\t\t/>\n\t\t\t\t{/* <div style={{ width: \"20%\" }}></div> */}\n\t\t\t\t<Insturction></Insturction>\n\t\t\t</div>\n\t\t\t<div className=\"App-piano\">\t\t\t\t\n\t\t\t\t{initializingGeneration && <div style={{height: '100%', width: '100%', position: 'absolute',left: 0, top: 0, zIndex: 1000, display: 'flex'}}>\n\t\t\t\t\t<div style={{height: '100%', width: '100%', position: 'absolute',left: 0, top: 0, backgroundColor: 'black', opacity: 0.3, zIndex: 10}}/>\n\t\t\t\t\t<p style={{position: 'absolute', whiteSpace: 'pre-wrap', left: 50, top: 6, fontSize: 12, fontFamily: 'monospace', color: '#7Ec291', zIndex: 50}}>{loadingText}</p>\n\t\t\t\t\t<CircularProgress color='primary' size={14} style={{marginLeft: 12, marginTop: 20}}/>\n\t\t\t\t</div>}\n\t\t\t\t<div style={{height: '100%', width: 6, position: 'absolute', left: 500, top: 0, backgroundColor: 'white', zIndex: 999, borderRadius: 3}}/>\n\t\t\t\t{notes.map((note, i) => {\n\t\t\t\t\tlet isFar = Math.abs(note.time * DURATION_FACTOR - playheadTime) > 2000;\n\t\t\t\t\tif(isFar) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet recorded = note.user || false;\n\t\t\t\t\t// let offset = recording ? 0 : playheadTime\n\t\t\t\t\tlet offset = playheadTime - 500\n\t\t\t\t\treturn <div\n\t\t\t\t\t\tkey={`${i}`}\n\t\t\t\t\t\tstyle={{ position: \"absolute\", left: note.time * DURATION_FACTOR - offset, top: MAX_MIDI * NOTE_HEIGHT - note.midi * NOTE_HEIGHT, width: note.duration * DURATION_FACTOR, height: NOTE_HEIGHT, backgroundColor: recorded ? '#BE2F29' : '#7Ec291' }}\n\t\t\t\t\t></div>\n\t\t\t\t}\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<div style={{height:'25%', display:'flex'}}>\n\t\t\t\t<div style={{height:'100%', width:'40%', margin:'0 0.25% 0 0.5%'}}>\n\t\t\t\t\t<div className=\"App-preset-container\">\n\t\t\t\t\t\t{presentChords.slice(0,5).map((chord) => {\n\t\t\t\t\t\t\treturn <button\n\t\t\t\t\t\t\t\tclassName=\"App-preset\"\n\t\t\t\t\t\t\t\tid={`${chord.name}`}\n\t\t\t\t\t\t\t\tkey={`${chord.key}`}\n\t\t\t\t\t\t\t\tname={`${chord.name}`}\n\t\t\t\t\t\t\t\tonPointerUp={(e) => onChordUp(chord)}\n\t\t\t\t\t\t\t\tonPointerDown={(e) => onChordDown(chord)}\n\t\t\t\t\t\t\t// onKeyUp={(e)=>onChordUp(chord)}\n\t\t\t\t\t\t\t// onKeyDown={(e)=>onChordDown(chord)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<div style={{ paddingTop: \"0.5vw\", fontSize: \"1.25vw\" }}>{chord.name}</div>\n\t\t\t\t\t\t\t\t<div style={{ paddingTop: \"1.25vw\", fontSize: \"1.25vw\", color: \"#E37B7B\" }}>{chord.key}</div>\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"App-preset-container\">\n\t\t\t\t\t\t{presentChords.slice(5,10).map((chord) => {\n\t\t\t\t\t\t\treturn <button\n\t\t\t\t\t\t\t\tclassName=\"App-preset\"\n\t\t\t\t\t\t\t\tid={`${chord.key}`}\n\t\t\t\t\t\t\t\tkey={`${chord.key}`}\n\t\t\t\t\t\t\t\tname={`${chord.name}`}\n\t\t\t\t\t\t\t\tonPointerUp={(e) => onChordUp(chord)}\n\t\t\t\t\t\t\t\tonPointerDown={(e) => onChordDown(chord)}\n\t\t\t\t\t\t\t// onKeyUp={(e)=>onChordUp(chord)}\n\t\t\t\t\t\t\t// onKeyDown={(e)=>onChordDown(chord)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<div style={{ paddingTop: \"0.5vw\", fontSize: \"1.25vw\" }}>{chord.name}</div>\n\t\t\t\t\t\t\t\t<div style={{ paddingTop: \"1.25vw\", fontSize: \"1.25vw\", color: \"#E37B7B\" }}>{chord.key}</div>\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div style={{height:'100%'}}>\n\t\t\t\t\t<ul class=\"set\">\n\t\t\t\t\t\t<li class=\"white b\"></li>\n\t\t\t\t\t\t<li class=\"black as\"></li>\n\t\t\t\t\t\t<li class=\"white a\"></li>\n\t\t\t\t\t\t<li class=\"black gs\"></li>\n\t\t\t\t\t\t<li class=\"white g\">a</li>\n\t\t\t\t\t\t<li class=\"black fs\">w</li>\n\t\t\t\t\t\t<li class=\"white f\">s</li>\n\t\t\t\t\t\t<li class=\"white e\">d</li>\n\t\t\t\t\t\t<li class=\"black ds\">r</li>\n\t\t\t\t\t\t<li class=\"white d\">f</li>\n\t\t\t\t\t\t<li class=\"black cs\">t</li>\n\t\t\t\t\t\t<li class=\"white c\">g</li>\n\t\t\t\t\t\t<li class=\"white b\">h</li>\n\t\t\t\t\t\t<li class=\"black as\">u</li>\n\t\t\t\t\t\t<li class=\"white a\">j</li>\n\t\t\t\t\t\t<li class=\"black gs\">i</li>\n\t\t\t\t\t\t<li class=\"white g\">k</li>\n\t\t\t\t\t\t<li class=\"black fs\">o</li>\n\t\t\t\t\t\t<li class=\"white f\">l</li>\n\t\t\t\t\t\t<li class=\"white e\">;</li>\n\t\t\t\t\t\t<li class=\"black ds\">[</li>\n\t\t\t\t\t\t<li class=\"white d\">'</li>\n\t\t\t\t\t\t<li class=\"black cs\"></li>\n\t\t\t\t\t\t<li class=\"white c\"></li>\n\t\t\t\t\t</ul>\n\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App\n","/home/victorpham1997/Workplace/SUTD/50038_computational_data_science/project/music-generator-app/react/src/Player.js",[],"/home/victorpham1997/Workplace/SUTD/50038_computational_data_science/project/music-generator-app/react/src/Recorder.js",["58"],"const bpm = 120 \nexport default class Recorder\n{\n    constructor() {\n        this.bpm = bpm;\n        this.timeSlice = 1/(this.bpm*4/60); //time slice - time of 16th notes\n        this.windowLength = 25; //number of time slices\n        this.slices = [];\n        this.currentChord = null;\n\n        //callbacks \n        this.onFinishRecording = null;\n    }\n\n    reset() {\n        this.slices = [];\n        this.currentChord = null;\n    }\n    \n    onChordPressed(chord) {\n        this.currentChord = chord;\n    }\n\n    onChordReleased(chord) {\n        if(this.currentChord == chord) {\n            this.currentChord = null;\n        }\n    }\n\n    startRecording(duration) {\n        console.log('started recording!')\n        this.windowLength = duration/(1/8);\n        this.recording = true;\n\n        //start slice tracking clock\n        this.interval = setInterval(() => {\n            this.captureSlice();    \n        }, this.timeSlice * 1000);\n    }\n\n    stopRecording() {\n        this.recording = false;\n\n        if (this.interval) {\n            clearInterval(this.interval);\n        }\n    }\n\n    finishRecording() {\n        this.stopRecording();\n\n        if(this.onFinishRecording) {\n            let result = this.slices;\n            //convert slices to parsable midi combination tuples\n\n            let tuples = []\n            for(let slice of result) {\n                //rest\n                if(!slice) {\n                    tuples.push([])\n                    continue;\n                }\n\n                let tuple = []\n                for(let note of slice.array) {\n                    let midi = noteStringToMidi(note)\n                    tuple.push(midi)\n                }\n\n                tuples.push(tuple)\n            }\n\n            this.onFinishRecording(tuples);\n        }\n    }\n\n    captureSlice() {\n        if(!this.recording) {\n            return;\n        }\n\n        if(this.slices.length > this.windowLength) {\n            this.finishRecording();\n        }\n\n        // console.log('recording slice: ', this.currentChord)\n        this.slices.push(this.currentChord);\n    }\n\n    getVisualNotes() {\n        let output = []\n        this.slices.forEach((slice, i) => {\n            if(!slice) {\n                return;\n            }\n            slice.array.forEach(noteString => {\n                let midi = noteStringToMidi(noteString); //C6 => 60 \n                output.push({\n                    time: i*this.timeSlice,\n                    duration: this.timeSlice,\n                    midi,\n                    user: true\n                })\n            });\n        })\n\n        return output;\n    }\n}\n\nconst noteToScaleIndex = {\n\tcbb: -2, cb: -1, c: 0, \"c#\": 1, cx: 2,\n\tdbb: 0, db: 1, d: 2, \"d#\": 3, dx: 4,\n\tebb: 2, eb: 3, e: 4, \"e#\": 5, ex: 6,\n\tfbb: 3, fb: 4, f: 5, \"f#\": 6, fx: 7,\n\tgbb: 5, gb: 6, g: 7, \"g#\": 8, gx: 9,\n\tabb: 7, ab: 8, a: 9, \"a#\": 10, ax: 11,\n\tbbb: 9, bb: 10, b: 11, \"b#\": 12, bx: 13,\n};\n\nconst noteStringToMidi = (noteString) => {\n    let components = noteString.match(/^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i)\n    let pitch = components[1]\n    let octave = components[2]\n    const index = noteToScaleIndex[pitch.toLowerCase()];\n    const noteNumber = index + (parseInt(octave, 10) + 1) * 12;\n    return noteNumber;\n}","/home/victorpham1997/Workplace/SUTD/50038_computational_data_science/project/music-generator-app/react/src/Model.js",["59","60","61","62","63"],"import { Midi } from '@tonejs/midi';\nimport axios from 'axios';\nimport fileDownload from 'js-file-download'\n\nconst server = 'http://localhost:5000'\n\nexport default class Model {\n\n    constructor() {\n        this.lastTokenSequence = []\n        this.fullTokenSequence = []\n    }\n\n    async userInputToMidi(userInput) {\n        let token_sequence = await this.userCombiToTokenSequence(userInput);\n        this.lastTokenSequence = token_sequence;\n        this.fullTokenSequence = token_sequence;\n        let userInputMidi = await this.tokenSequenceToMidi(token_sequence);        \n        return userInputMidi;\n    }\n\n    async generateNext() {\n        let sliceOffsetCount = this.fullTokenSequence.length; //the slice count before it was generated\n        let generatedTokenSequence = await this.generateNextTokenSequence();\n        let generatedMidi = await this.tokenSequenceToMidi(generatedTokenSequence);\n        return {\n            midi: generatedMidi,\n            tokens: generatedTokenSequence,\n            slicesBeforeGenerated: sliceOffsetCount\n        };\n    }\n\n    async generateNextTokenSequence() {\n        if(this.lastTokenSequence.length == 0) {\n            console.error('Last token sequence missing. Please record first')\n        }\n\n        let window = 300\n        let refTokenSequence = this.fullTokenSequence.length >= window ? this.fullTokenSequence.slice(this.fullTokenSequence.length-window) : this.fullTokenSequence; //if the full length is too short, just send the short one and let server side pad\n        let generatedTokenSequence = await this.generateTokenSequenceFromTokenSequence(refTokenSequence)\n        this.fullTokenSequence = [...this.fullTokenSequence, ...generatedTokenSequence]; //append token sequence\n        this.lastTokenSequence = generatedTokenSequence;\n        return generatedTokenSequence;\n    }\n    \n    async userCombiToTokenSequence(user_combi) {\n        // let url = server + '/generate_from_user_input'\n        let response = await axios({            \n            url: server + '/user_combi_to_token_sequence',\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            responseType: 'json',\n            data: { user_combi }\n        })\n        \n        if(response.status == 200 && response.data) {\n            let token_sequence = response.data\n            return token_sequence\n        }\n\n        console.error('userCombiToTokenSequence: invalid response from server');\n        return null;\n    }\n    \n    async tokenSequenceToMidi(token_sequence) {\n        let response = await axios({            \n            url: server + '/token_sequence_to_midi',\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            responseType: 'arraybuffer',\n            data: { token_sequence }\n        })\n\n        if(response.status == 200 && response.data) {\n            let midiFile = new Midi(response.data)\n            this.lastMidiChunk = midiFile;\n            return midiFile;\n        }\n\n        console.error('tokenSequenceToMidi: invalid response from server');\n        return null;\n    }\n\n    async generateTokenSequenceFromTokenSequence(last_token_sequence) {\n        \n        let response = await axios({            \n            url: server + '/generate_next_token_sequence',\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            responseType: 'json',\n            data: { token_sequence: last_token_sequence }\n        })\n\n        if(response.status == 200 && response.data) {\n            let token_sequence = response.data;\n            return token_sequence;\n        }\n\n        console.error('tokenSequenceToGeneratedTokenSequence: invalid response from server');\n        return null;\n    }\n\n    reset() {\n        this.lastTokenSequence = []\n        this.fullTokenSequence = []\n    }\n}","/home/victorpham1997/Workplace/SUTD/50038_computational_data_science/project/music-generator-app/react/src/components/Instructions.js",["64","65","66"],"import Modal from '@material-ui/core/Modal';\nimport Info from '@material-ui/icons/Info';\nimport { useEffect, useState } from 'react'\nimport '../App.css';\nimport { Button, Icon, IconButton } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\n//Jazz Generation \n\n// Instructions: \n// (1) Familiarise yourself with the Chords and Notes are the bottom, you can either click on them or press the keys (highlighted in orange) on your keyboard \n\n// (2) Press the becord button (Red Circle)\n\n// (3) Immediately enter the chords/notes of your choice. Quick you only have 2s!\n\n// (4) Wait for generated music to load onto the screen\n\n// (5) Press the play button (Triangle)\n\n// (6) Enjoy! \n\n// (7) Before starting a new recording, please prease the stop button (Square) \n\n// (8) You can also pause a song by pressing the pause button ( 2 rectangular blocks)\n\n// (9) You can also press the rewind button (loop) to listen back to our collective creation\n\nexport default function Instruction(){\n\n    const StyledButton = withStyles({\n        root: {\n          background: '#fff',\n          borderRadius: \"60px\",\n          border: 0,\n          color: '#000',\n          height: \"100%\",\n          padding: '2vw',\n          fontWeight:\"700\",\n          fontSize:\"1.75vw\",\n          fontFamily:\"Helvetica Neue\",\n          '&:hover': {\n            background: \"#7Ec291\",\n            color:\"#fff\"\n        }\n        },\n        label: {\n          textTransform: 'uppercase',\n        },\n    })(Button);\n    //Modal Related\n\tconst [open, setOpen] = useState(false); \n    const handleOpenModal = () => {\n      setOpen(true);\n    };\n    const handleCloseModal = () => {\n      setOpen(false);\n    };\n\n    function Body(){\n        return(\n            <div style={{width:\"50%\", backgroundColor:\"white\",borderRadius:\"30px\",padding:\"2vw 2vw\", wordWrap:\"break-word\"}}>\n                <div style={{textAlign:\"center\",fontWeight:\"700\",fontSize:\"3vw\"}}>Jazz Generation</div>\n                <br></br>\n                <div className=\"modal-instructions\">\n                    <div className=\"modal-instructions-text bold\">Instructions:</div>\n                    <br></br>\n                    <div className=\"modal-instructions-text\">(1) Familiarise yourself with the Chords and Notes are the bottom, you can either click on them or press the keys (highlighted in orange) on your keyboard </div>\n                    <br></br>\n                    <div className=\"modal-instructions-text\">(2) Press the becord button (Red Circle)</div>\n                    <br></br>\n                    <div className=\"modal-instructions-text\">(3) Immediately enter the chords/notes of your choice. Quick you only have 2s!</div>\n                    <br></br>\n                    <div className=\"modal-instructions-text\">(4) Wait for generated music to load onto the screen</div>\n                    <br></br>\n                    <div className=\"modal-instructions-text\">(5) Press the play button (Triangle)</div>\n                    <br></br>\n                    <div className=\"modal-instructions-text\">(6) Enjoy!</div>\n                    <br></br>\n                    <div className=\"modal-instructions-text\">(7) Before starting a new recording, please prease the stop button (Square) </div>\n                    <br></br>\n                    <div className=\"modal-instructions-text\">(8) You can also pause a song by pressing the pause button ( 2 rectangular blocks)</div>\n                    <br></br>\n                    <div className=\"modal-instructions-text\">(9) You can also press the rewind button (Double Triangle) to listen back to our collective creation</div>\n                    <br></br>\n                    \n                </div>\n            </div>\n        )\n    }\n\n    return(\n        <div style={{width:\"20%\"}}>\n            <IconButton type=\"button\" onClick={handleOpenModal} className=\"instruction-button\">\n                <Info style={{width: '5vw', height: '5vw', fill: '#0C1115'}}/>\n            </IconButton>\n            <Modal\n                  open={open}\n                  onClose={handleCloseModal}\n                  aria-labelledby=\"simple-modal-title\"\n                  aria-describedby=\"simple-modal-description\"\n                  style={{display:'flex',alignItems:'center',justifyContent:'center'}}\n                >\n                    <Body></Body>\n            </Modal>\n        </div>\n    )\n}",["67","68"],"/home/victorpham1997/Workplace/SUTD/50038_computational_data_science/project/music-generator-app/react/src/components/Playbar.js",["69","70"],"import { Button, Icon, IconButton } from '@material-ui/core';\nimport PlayArrow from '@material-ui/icons/PlayArrow';\nimport Pause from '@material-ui/icons/Pause';\nimport Stop from '@material-ui/icons/Stop';\nimport FiberManualRecord from '@material-ui/icons/FiberManualRecord';\nimport FastRewind from '@material-ui/icons/FastRewind';\n\nimport React from 'react'\n// import { useMediaQuery } from 'react-responsive'\nimport '../App.css';\n// import { useEffect, useState } from 'react'\n\nexport default function PlayBar(props){\n    return(\n        <div>\n            <div className=\"App-Playbar\" >\n                <IconButton disabled={props.recordingState} onClick={props.onClickRewind} className=\"material-icons play-button\">\n                    <FastRewind style={{width: '3vw', height: '3vw', fill: 'white'}}/>\n                </IconButton>\n                <IconButton disabled={props.recordingState} onClick={props.onClickPlayPause} className=\"material-icons play-button\">\n                    { props.playingState\n                        ? <Pause style={{width: '3vw', height: '3vw', fill: 'white'}}/>\n                        : <PlayArrow style={{width: '3vw', height: '3vw', fill: 'white'}}/>\n                    }\n                </IconButton>\n                <IconButton disabled={props.recordingState} onClick={props.onClickStop} className=\"material-icons play-button\">\n                    <Stop style={{width: '3vw', height: '3vw', fill: 'white'}}/>\n                </IconButton>\n                <IconButton onClick={props.onClickRecord} className=\"material-icons play-button\">\n                    <FiberManualRecord style={{width: '3vw', height: '3vw', fill: props.recordingState ? '#c4302b': '#E37B7B'}}/>\n                </IconButton>\n                {/* <button disabled={props.recordingState} onClick={props.onClickPlay} className=\"material-icons play-button\">play_arrow</button>\n                <button disabled={props.recordingState} onClick={props.onClickPause} className=\"material-icons play-button\" >pause</button>\n                <button disabled={props.recordingState} onClick={props.onClickStop} className=\"material-icons play-button\">stop</button>\n                {!props.recordingState && <button onClick={props.onClickRecord} className=\"material-icons red play-button\">fiber_manual_record</button>}\n                {props.recordingState && <button onClick={props.onClickRecordStop} className=\"material-icons redder play-button\">fiber_manual_record</button>} */}    \n            </div>\n            <div className=\"App-Setting\">\n                <div class=\"column\">\n                    Record duration:\n                    <br/>\n                    <select id=\"recordDuration\" class=\"dropdown-option\">\n                        <option value=\"3\">&nbsp; 3 seconds</option>\n                        <option value=\"5\">&nbsp; 5 seconds</option>\n                        <option value=\"7\">&nbsp; 7 seconds</option>\n                    </select>\n                </div>\n            </div>\n        </div>\n    );\n\n}\n","/home/victorpham1997/Workplace/SUTD/50038_computational_data_science/project/music-generator-app/react/src/public/data.js",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":11,"column":28,"nodeType":"77","messageId":"78","endLine":11,"endColumn":34},{"ruleId":"75","severity":1,"message":"79","line":11,"column":36,"nodeType":"77","messageId":"78","endLine":11,"endColumn":45},{"ruleId":"75","severity":1,"message":"80","line":20,"column":9,"nodeType":"77","messageId":"78","endLine":20,"endColumn":21},{"ruleId":"75","severity":1,"message":"81","line":24,"column":19,"nodeType":"77","messageId":"78","endLine":24,"endColumn":30},{"ruleId":"75","severity":1,"message":"82","line":25,"column":16,"nodeType":"77","messageId":"78","endLine":25,"endColumn":24},{"ruleId":"83","severity":1,"message":"84","line":118,"column":5,"nodeType":"85","endLine":118,"endColumn":7,"suggestions":"86"},{"ruleId":"87","severity":1,"message":"88","line":124,"column":13,"nodeType":"89","messageId":"90","endLine":124,"endColumn":15},{"ruleId":"87","severity":1,"message":"91","line":133,"column":13,"nodeType":"89","messageId":"90","endLine":133,"endColumn":15},{"ruleId":"87","severity":1,"message":"91","line":160,"column":17,"nodeType":"89","messageId":"90","endLine":160,"endColumn":19},{"ruleId":"87","severity":1,"message":"91","line":161,"column":24,"nodeType":"89","messageId":"90","endLine":161,"endColumn":26},{"ruleId":"87","severity":1,"message":"91","line":168,"column":30,"nodeType":"89","messageId":"90","endLine":168,"endColumn":32},{"ruleId":"87","severity":1,"message":"91","line":25,"column":30,"nodeType":"89","messageId":"90","endLine":25,"endColumn":32},{"ruleId":"75","severity":1,"message":"92","line":3,"column":8,"nodeType":"77","messageId":"78","endLine":3,"endColumn":20},{"ruleId":"87","severity":1,"message":"91","line":34,"column":42,"nodeType":"89","messageId":"90","endLine":34,"endColumn":44},{"ruleId":"87","severity":1,"message":"91","line":56,"column":28,"nodeType":"89","messageId":"90","endLine":56,"endColumn":30},{"ruleId":"87","severity":1,"message":"91","line":74,"column":28,"nodeType":"89","messageId":"90","endLine":74,"endColumn":30},{"ruleId":"87","severity":1,"message":"91","line":94,"column":28,"nodeType":"89","messageId":"90","endLine":94,"endColumn":30},{"ruleId":"75","severity":1,"message":"93","line":3,"column":10,"nodeType":"77","messageId":"78","endLine":3,"endColumn":19},{"ruleId":"75","severity":1,"message":"94","line":5,"column":18,"nodeType":"77","messageId":"78","endLine":5,"endColumn":22},{"ruleId":"75","severity":1,"message":"95","line":30,"column":11,"nodeType":"77","messageId":"78","endLine":30,"endColumn":23},{"ruleId":"71","replacedBy":"96"},{"ruleId":"73","replacedBy":"97"},{"ruleId":"75","severity":1,"message":"76","line":1,"column":10,"nodeType":"77","messageId":"78","endLine":1,"endColumn":16},{"ruleId":"75","severity":1,"message":"94","line":1,"column":18,"nodeType":"77","messageId":"78","endLine":1,"endColumn":22},"no-native-reassign",["98"],"no-negated-in-lhs",["99"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'withTheme' is defined but never used.","'isGenerating' is assigned a value but never used.","'setRecorder' is assigned a value but never used.","'setModel' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'SampleChords', 'model', 'player', 'playerTwo', and 'recorder'. Either include them or remove the dependency array. You can also do a functional update 'setPlayer(p => ...)' if you only need 'player' in the 'setPlayer' call.","ArrayExpression",["100"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'fileDownload' is defined but never used.","'useEffect' is defined but never used.","'Icon' is defined but never used.","'StyledButton' is assigned a value but never used.",["98"],["99"],"no-global-assign","no-unsafe-negation",{"desc":"101","fix":"102"},"Update the dependencies array to be: [SampleChords, model, player, playerTwo, recorder]",{"range":"103","text":"104"},[3827,3829],"[SampleChords, model, player, playerTwo, recorder]"]